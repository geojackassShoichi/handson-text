=====================
 Jubatusを使ってみる
=====================

サンプルを実行する
==================

まずは、サンプルプログラムを実行してみます。
以下のURLからサンプルプログラムをダウンロードしてください。

では、実行してみましょう。

::

   $ python sample.py
   TODO 出力を表示

上記のような出力が出たら成功です。


サーバー・クライアントモデル
============================

先のプログラムがどのように動いているのかを通じて、Jubatusの仕組みを解説します。
Jubatusは最初に実行した ``jubaclassifier`` をはじめとするサーバーと、サンプルプログラムを始めとするクライアントからなります。
この仕組のお陰で、C++で書かれたサーバーがデータの分析を行い、ユーザーサイドのクライアントはPythonやJavaなどの複数の言語から利用できます。

クライアントとサーバー間の通信は、 *msgpack* というデータシリアライズ形式を使った *msgpack-rpc* を利用しています。
各言語用のクライアントライブラリは、msgpack-rpcをラップして隠蔽しているため、ユーザーは何の通信プロトコルを利用しているか知る必要はありません。
クライアントライブラリで用意されているメソッドを呼び出すだけで、自動的に通信を行い、分析結果が得られます。


サンプルプログラムを読んでみる
==============================

さて、ここから自分でプログラムを書いてみましょう。
まず手始めに、サンプルプログラムを読んでみます。
非常に単純なサンプルです。

::

   TODO

ここでは Python のソースをベースに説明します。
他の言語のサンプルも概ね同じような構造を指定ます。

簡単に説明します。
分類器の学習には、「このデータはこの分類がされます」という *教師データ* を与える必要があります。
教師データは *正解データ* 、 *ラベル付きデータ* と呼ばれることもあります。
最初の行で用意しているのが、この教師データです。
教師データを使って、 ``jubaclassifier`` の ``train`` メソッドを呼び出しています。
``train`` メソッドは、教師データを与えて学習を行うためのメソッドです。

学習のステップが終わったら、未分類のデータを自動分類しています。
``classify`` メソッドは、未分類のデータを分類するためのメソッドです。
今まで学習したデータの傾向に照らしあわせて、同じ基準で分類を行います。

分類結果は ``classification_result`` という型で返ってきます。
TODO

サンプルを改造してみる
======================

サンプルプログラムの改造を通して、使い方の感触を得ましょう。
一番簡単な改良として、学習データを増やしてみます。
一般的に、学習データは大量にあったほうが分類精度は良くなります。
以下のように、学習データを増やしてみます。

TODO

いくつかのデータに対して、分類結果が変わりました。

学習データは増やせば増やすほど、基本的には分類精度の向上が期待されます。
ただし、追加したデータが今までと違う傾向があったりすると、精度が向上するどころか下がることもあるので注意しましょう。


次に、ラベルを追加してみます。
今まで TODO と TODO だけの分類でしたが、 TODO を更に2つに分けて、以下のように細かい分類にしてみます。

TODO

先程と同様に実行してみましょう。

TODO

一般的にラベル数を増やせば増やすほど、見かけ上の精度は下がることに注意しましょう。
分類の粒度が細かくなればなるほど、正しく当てるのが難しくなるためです。


